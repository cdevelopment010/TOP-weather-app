(()=>{"use strict";var e={151:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800;900&display=swap);"]),o.push([e.id,'*{margin:0;padding:0;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}body{color:#5f6f77;background:#c8d4da;font-family:"Inter",sans-serif}#root{color:#5f6f77;min-height:100vh;height:100%;width:80%;margin:0 auto;display:flex;flex-direction:column;justify-content:space-between}header,footer{min-height:10vh;background-color:#c8d4da;display:grid;gap:25px;align-items:center;justify-content:center;padding:10px 25px}@media screen and (min-width: 48em){header,footer{display:flex;justify-content:space-between;align-items:center}}header .searchContainer,header .linkContainer,footer .searchContainer,footer .linkContainer{display:flex;gap:10px;align-items:center;justify-content:center}header .searchContainer i,header .linkContainer i,footer .searchContainer i,footer .linkContainer i{cursor:pointer}header .searchContainer i:hover,header .linkContainer i:hover,footer .searchContainer i:hover,footer .linkContainer i:hover{color:#fff}header a:hover,footer a:hover{color:#fff}a{color:inherit;text-decoration:none;font-size:1.5em}.main-container{display:grid;gap:20px}#main-weather,#future-weather{padding:25px;display:grid;align-items:center;background-color:#fff;box-shadow:0 4px 4px 0 rgba(0,0,0,.25);border-radius:50px;gap:5px}#main-weather{grid-template-columns:1fr;justify-items:center;align-items:center;grid-template-areas:"temp" "temp" "loc" "img" "dateTime" "weather" "wind" "pressure"}#main-weather #temp{grid-area:temp;font-size:4em;font-weight:bold;text-align:center}#main-weather #location{grid-area:loc;font-size:3em;text-align:center}#main-weather #date-time{grid-area:dateTime;font-weight:bold}#main-weather img{grid-area:img}#main-weather #weather{grid-area:weather}#main-weather #wind{grid-area:wind}#main-weather #pressure{grid-area:pressure}#future-weather{grid-template-columns:repeat(1, 1fr)}#future-weather .future-card{position:relative;display:grid;align-items:center;justify-content:center}#future-weather .future-card .temp{font-size:1.2em;font-weight:bold}#future-weather .future-card p{text-align:center}#future-weather .future-card::after{height:3px;width:100%;bottom:-5px;content:"";position:absolute;background:#c8d4da}#future-weather :last-child::after{height:0}.switch{position:relative;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#5f6f77;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:"C";display:flex;align-items:center;justify-content:center;height:26px;width:26px;left:4px;bottom:4px;background-color:#f78763;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#5f6f77}input:focus+.slider{box-shadow:0 0 1px #5f6f77}input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px);content:"F";background-color:#63cbf7}.slider.round{border-radius:34px}.slider.round:before{border-radius:50%}@media screen and (min-width: 48em){#main-weather,#future-weather{order-radius:100px}#main-weather{grid-template-columns:.6fr .2fr .2fr;grid-template-areas:"temp  dateTime ." "temp  weather img" "loc  wind img" "loc  pressure ."}#main-weather #temp{font-size:4em}#main-weather #location{font-size:3em}#future-weather{grid-template-columns:repeat(6, 1fr)}#future-weather .future-card{position:relative;display:grid;align-items:center;justify-content:center}#future-weather .future-card .temp{font-size:1.2em;font-weight:bold}#future-weather .future-card p{text-align:center}#future-weather .future-card::after{height:100%;width:3px;right:0;content:"";position:absolute;background:#c8d4da}#future-weather :last-child::after{height:0}}',"",{version:3,sources:["webpack://./src/sass/main.scss","webpack://./src/sass/variables.scss","webpack://./src/sass/mixins.scss"],names:[],mappings:"AAIA,EACI,QAAA,CACA,SAAA,CACA,0BAAA,CACA,6BAAA,CACA,qBAAA,CAGJ,KACI,aCTO,CDUP,kBCbU,CDcV,8BAAA,CAGJ,MACI,aCfO,CDgBP,gBAAA,CACA,WAAA,CACA,SAAA,CACA,aAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAIJ,cACI,eAAA,CACA,wBC/BU,CDgCV,YAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CElCI,oCF2BR,cAUQ,YAAA,CACA,6BAAA,CACA,kBAAA,CAAA,CAGJ,4FACI,YAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CAEA,oGACI,cAAA,CAGJ,4HACI,UCxDF,CD4DN,8BACI,UC7DE,CDkEV,EACI,aAAA,CACA,oBAAA,CACA,eAAA,CAIJ,gBACI,YAAA,CACA,QAAA,CAKJ,8BACI,YAAA,CACA,YAAA,CACA,kBAAA,CACA,qBCpFM,CDqFN,sCAAA,CACA,kBAAA,CACA,OAAA,CAGJ,cACI,yBAAA,CACA,oBAAA,CACA,kBAAA,CACA,oFAAA,CAUA,oBACI,cAAA,CACA,aAAA,CACA,gBAAA,CACA,iBAAA,CAEJ,wBACI,aAAA,CACA,aAAA,CACA,iBAAA,CAEJ,yBACI,kBAAA,CACA,gBAAA,CAGJ,kBACI,aAAA,CAEJ,uBACI,iBAAA,CAEJ,oBACI,cAAA,CAEJ,wBACI,kBAAA,CAOR,gBACI,oCAAA,CAEA,6BACI,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,mCACI,eAAA,CACA,gBAAA,CAGJ,+BACI,iBAAA,CAGJ,oCACI,UAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,kBChKE,CDqKN,mCACI,QAAA,CAMZ,QACI,iBAAA,CACA,oBAAA,CACA,UAAA,CACA,WAAA,CAIF,cACE,SAAA,CACA,OAAA,CACA,QAAA,CAIF,QACE,iBAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,wBC/LO,CDgMP,sBAAA,CACA,cAAA,CAEA,eACI,iBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,UAAA,CACA,wBC/MQ,CDgNR,sBAAA,CACA,cAAA,CAKN,sBACE,wBCrNO,CDwNT,oBACE,0BAAA,CAGF,6BACE,kCAAA,CACA,8BAAA,CACA,0BAAA,CACA,WAAA,CACA,wBClOe,CDsOjB,cACE,kBAAA,CAGF,qBACE,iBAAA,CAIF,oCAEE,8BACI,kBAAA,CAEJ,cACI,oCAAA,CACA,4FAAA,CAMA,oBACI,aAAA,CAGJ,wBACI,aAAA,CAIR,gBACI,oCAAA,CAEA,6BACI,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,mCACI,eAAA,CACA,gBAAA,CAGJ,+BACI,iBAAA,CAGJ,oCACI,WAAA,CACA,SAAA,CACA,OAAA,CACA,UAAA,CACA,iBAAA,CACA,kBC/RF,CDoSF,mCACI,QAAA,CAAA",sourcesContent:['@import url(\'https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800;900&display=swap\');\n@import \'./variables.scss\'; \n@import \'./mixins.scss\';\n\n* {\n    margin: 0; \n    padding: 0; \n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\nbody {\n    color: $text-col;\n    background: $primary-col;\n    font-family: \'Inter\', sans-serif;\n}\n\n#root {\n    color: $text-col;\n    min-height: 100vh;\n    height: 100%; \n    width: 80%; \n    margin: 0 auto;\n    display: flex; \n    flex-direction: column;\n    justify-content: space-between;\n\n}\n\nheader, footer {\n    min-height: 10vh;\n    background-color: $primary-col;\n    display: grid; \n    gap: 25px; \n    align-items: center;\n    justify-content: center;\n    padding: 10px 25px; \n\n    @include resize(\'tablet\') {\n        display: flex; \n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .searchContainer, .linkContainer {\n        display: flex; \n        gap: 10px; \n        align-items: center;\n        justify-content: center;\n\n        i {\n            cursor: pointer;\n        }\n\n        i:hover {\n            color: $card-bg; \n        }\n    }\n\n    a:hover {\n        color: $card-bg; \n    }\n}\n\n\na {\n    color: inherit;\n    text-decoration: none;\n    font-size: 1.5em;\n}\n\n\n.main-container {\n    display: grid;\n    gap: 20px;\n\n}\n\n\n#main-weather, #future-weather {\n    padding: 25px; \n    display: grid; \n    align-items: center;\n    background-color: $card-bg; \n    box-shadow: 0 4px 4px 0 rgba(0,0,0,0.25);\n    border-radius: 50px;\n    gap: 5px;\n}\n\n#main-weather {\n    grid-template-columns: 1fr;\n    justify-items: center;\n    align-items: center;\n    grid-template-areas: "temp"\n        "temp"\n        "loc"\n        "img"\n        "dateTime"\n        "weather"\n        "wind"\n        "pressure"\n    ;\n\n    #temp {\n        grid-area: temp; \n        font-size: 4em;\n        font-weight: bold; \n        text-align: center;\n    }\n    #location {\n        grid-area: loc; \n        font-size: 3em;\n        text-align: center;\n    }\n    #date-time {\n        grid-area: dateTime; \n        font-weight: bold; \n\n    }\n    img {\n        grid-area: img; \n    }\n    #weather {\n        grid-area: weather;\n    }\n    #wind {\n        grid-area: wind;\n    }\n    #pressure {\n        grid-area: pressure;\n    }\n}\n\n// future weather\n\n\n#future-weather {\n    grid-template-columns: repeat(1, 1fr);\n\n    .future-card {\n        position: relative;\n        display: grid; \n        align-items: center;\n        justify-content: center;\n\n        .temp {\n            font-size: 1.2em; \n            font-weight: bold;\n        }\n\n        p {\n            text-align: center;\n        }\n\n        &::after {\n            height: 3px; \n            width: 100%; \n            bottom: -5px; \n            content: \'\'; \n            position: absolute; \n            background: $primary-col;\n        }\n    }\n\n    :last-child {\n        &::after {\n            height: 0; \n        }\n    }\n}\n\n/* The switch - the box around the slider */\n.switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }\n  \n  /* Hide default HTML checkbox */\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n  \n  /* The slider */\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: $text-col;\n    -webkit-transition: .4s;\n    transition: .4s;\n\n    &:before {\n        position: absolute;\n        content: "C";\n        display: flex; \n        align-items: center;\n        justify-content: center;\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: $secondary-col;\n        -webkit-transition: .4s;\n        transition: .4s;\n      }\n  }\n  \n  \n  input:checked + .slider {\n    background-color: $text-col;;\n  }\n  \n  input:focus + .slider {\n    box-shadow: 0 0 1px $text-col;;\n  }\n  \n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n    content: "F";\n    background-color: $toggle-secondary;\n  }\n  \n  /* Rounded sliders */\n  .slider.round {\n    border-radius: 34px;\n  }\n  \n  .slider.round:before {\n    border-radius: 50%;\n  }\n\n\n  @media screen and (min-width: 48em ){\n\n    #main-weather, #future-weather{\n        order-radius: 100px;\n    }\n    #main-weather {\n        grid-template-columns: 0.6fr .2fr 0.2fr;\n        grid-template-areas: "temp  dateTime ."\n        "temp  weather img"\n        "loc  wind img"\n        "loc  pressure ."\n    ;\n\n        #temp {\n            font-size: 4em;\n        }\n\n        #location {\n            font-size: 3em;\n        }\n    }\n\n    #future-weather {\n        grid-template-columns: repeat(6, 1fr); \n\n        .future-card {\n            position: relative;\n            display: grid; \n            align-items: center;\n            justify-content: center;\n    \n            .temp {\n                font-size: 1.2em; \n                font-weight: bold;\n            }\n    \n            p {\n                text-align: center;\n            }\n    \n            &::after {\n                height: 100%; \n                width: 3px; \n                right: 0; \n                content: \'\'; \n                position: absolute; \n                background: $primary-col;\n            }\n        }\n    \n        :last-child {\n            &::after {\n                height: 0; \n            }\n        }\n    }\n  }',"$card-bg: white; \n$primary-col: #C8D4DA; \n$secondary-col: #F78763; \n$toggle-secondary: #63CBF7;\n$text-col: #5F6F77;","@mixin resize($bp) {\n\n    @if $bp == 'tablet' {\n        @media screen and (min-width: 48em) {\n            @content;\n        }\n    }\n    @if $bp == 'laptop' {\n        @media screen and (min-width: 64em) {\n            @content;\n        }\n    }\n    @if $bp == 'desktop' {\n        @media screen and (min-width: 90em) {\n            @content;\n        }\n    }\n}"],sourceRoot:""}]);const A=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(o[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],A=0;A<e.length;A++){var c=e[A],s=r.base?c[0]+r.base:c[0],d=i[s]||0,p="".concat(s," ").concat(d);i[s]=d+1;var l=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)n[l].references++,n[l].updater(u);else{var m=a(u,r);r.byIndex=A,n.splice(A,0,{identifier:p,updater:m,references:1})}o.push(p)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var A=t(i[o]);n[A].references--}for(var c=r(e,a),s=0;s<i.length;s++){var d=t(i[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),i=t(569),o=t.n(i),A=t(565),c=t.n(A),s=t(216),d=t.n(s),p=t(589),l=t.n(p),u=t(151),m={};function C(e){const n=e.list,t=function(e,n){console.log(e);const t=document.createElement("div"),r=document.createElement("p"),a=document.createElement("img"),i=document.createElement("p"),o=document.createElement("p"),A=document.createElement("p"),c=document.createElement("p"),s=document.createElement("p");let d=new Date(e.dt_txt);return r.innerText=n,i.innerText=new Intl.DateTimeFormat("en-GB",{weekday:"short"}).format(d)+" | "+new Intl.DateTimeFormat("en-GB",{hour12:!1,hour:"numeric",minute:"numeric"}).format(d),o.innerHTML=Math.round(10*(e.main.temp-273))/10+" &#8451;",A.innerText=e.weather[0].main,c.innerText=e.main.pressure+" hPa",s.innerText=e.wind.speed+" m/s",a.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,o.classList="temp",o.id="temp",r.id="location",i.id="date-time",A.id="weather",c.id="pressure",s.id="wind",t.append(r),t.append(a),t.append(i),t.append(o),t.append(A),t.append(c),t.append(s),t.id="main-weather",t}(n[0],e.city.name),r=function(e,n,t){const r=document.createElement("div");return e.forEach(((e,n)=>{if(n>=0&&n<=5){console.log(e);const n=document.createElement("div"),t=document.createElement("img"),a=document.createElement("p"),i=document.createElement("p");let o=new Date(e.dt_txt);a.innerText=new Intl.DateTimeFormat("en-GB",{weekday:"short"}).format(o)+" | "+new Intl.DateTimeFormat("en-GB",{hour12:!1,hour:"numeric",minute:"numeric"}).format(o),i.innerText=Math.round(10*(e.main.temp-273))/10+" C"||0,t.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,i.classList="temp",n.append(i),n.append(t),n.append(a),n.className="future-card",r.append(n)}})),r.id="future-weather",r}(n);console.log(r),function(e,n){const t=document.createElement("div");t.append(e),t.append(n),t.className="main-container",document.querySelector("#main").append(t),document.querySelector("#toggle").querySelector("input").addEventListener("click",(function(){!function(e){const n=e.checked;document.querySelectorAll(".temp").forEach((e=>{let t=e.innerText.split(" ")[0];e.innerHTML=n?Math.round(10*(1.8*t+32))/10+" &#8457;":Math.round(5/9*(t-32)*10)/10+" &#8451;"}))}(this)}))}(t,r)}m.styleTagTransform=l(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),n()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals,function(){const e=document.createElement("header"),n=document.createElement("h1"),t=document.createElement("div"),r=document.createElement("input"),a=document.createElement("i");let i=function(){const e=document.createElement("label"),n=document.createElement("input"),t=document.createElement("span");return e.className="switch",n.type="checkbox",t.className="slider round",e.append(n),e.append(t),e}();i.id="toggle",n.innerText="Weather App",r.type="text",r.placeholder="City...",a.className="fa-solid fa-magnifying-glass",t.append(i),t.append(r),t.append(a),t.className="searchContainer",e.append(n),e.append(t),document.querySelector("#header").append(e)}(),async function(e){const n=await fetch("https://api.openweathermap.org/data/2.5/forecast?q=Durham, UK&appid=cb561535d4382bd95e0f2ab965974e4e");C(await n.json())}(),function(){const e=document.createElement("footer"),n=document.createElement("a"),t=document.createElement("div"),r=document.createElement("a"),a=document.createElement("a");n.innerText="The Odin Project",n.href="https://www.theodinproject.com/",n.target="_blank",r.innerHTML='<i class="fa-brands fa-github"></i>',r.href="https://github.com/cdevelopment010/",r.target="_blank",a.innerHTML='<i class="fa-brands fa-youtube"></i>',a.href="https://www.youtube.com/channel/UCtHK20C4Dw4fcs7kZDl4QPQ",a.target="_blank",t.append(r),t.append(a),t.className="linkContainer",e.append(n),e.append(t),document.querySelector("#footer").append(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,