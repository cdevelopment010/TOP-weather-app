(()=>{"use strict";var e={151:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),c=t(667),A=t.n(c),s=new URL(t(402),t.b),d=a()(o()),p=A()(s);d.push([e.id,"*{margin:0;padding:0;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}#root{color:#2b2b2b;min-height:100vh;height:100%;display:flex;flex-direction:column;justify-content:space-between;background:url("+p+');background-repeat:no-repeat;background-size:cover;background-position:center}header,footer{min-height:10vh;background-color:#7fc0dc;display:grid;gap:25px;align-items:center;justify-content:center;padding:10px 25px}@media screen and (min-width: 48em){header,footer{display:flex;justify-content:space-between;align-items:center}}header .searchContainer,header .linkContainer,footer .searchContainer,footer .linkContainer{display:flex;gap:10px;align-items:center;justify-content:center}header .searchContainer i,header .linkContainer i,footer .searchContainer i,footer .linkContainer i{cursor:pointer}header .searchContainer i:hover,header .linkContainer i:hover,footer .searchContainer i:hover,footer .linkContainer i:hover{color:#fff}header a:hover,footer a:hover{color:#fff}a{color:inherit;text-decoration:none;font-size:1.5em}#main{flex-grow:1;display:flex;flex-direction:column;width:80%;margin:25px auto}.main-container{display:grid;grid-template-columns:2fr 2fr;gap:20px;flex-grow:.7}#main-weather{padding:25px;display:grid;grid-template-columns:4fr 1fr;gap:5px;grid-template-rows:1fr repeat(4, max-content);align-items:stretch;background-color:#fff;box-shadow:0 4px 5px 0 #000}#main-weather img{grid-column:1/3;grid-row:1/2;justify-self:center}#main-weather .switch{grid-row:2/3;grid-column:2/3}#main-weather:first-of-type(p){grid-row:2/3;grid-column:1/2}#main-weather p:nth-of-type(2){grid-column:1/2}#main-weather p:nth-of-type(3){grid-column:1/2}#main-weather p:nth-of-type(4){grid-column:1/2}#main-weather p:nth-of-type(5){grid-column:1/2}#main-weather p:nth-of-type(6){grid-column:1/2}.main-container div:nth-child(2){flex:1 0 auto;background-color:#fff}.switch{position:relative;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#2b2b2b;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:"C";display:flex;align-items:center;justify-content:center;height:26px;width:26px;left:4px;bottom:4px;background-color:#f78763;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#2b2b2b}input:focus+.slider{box-shadow:0 0 1px #2b2b2b}input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px);content:"F";background-color:#63cbf7}.slider.round{border-radius:34px}.slider.round:before{border-radius:50%}',"",{version:3,sources:["webpack://./src/sass/main.scss","webpack://./src/sass/variables.scss","webpack://./src/sass/mixins.scss"],names:[],mappings:"AAIA,EACI,QAAA,CACA,SAAA,CACA,0BAAA,CACA,6BAAA,CACA,qBAAA,CAGJ,MACI,aCTO,CDUP,gBAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEA,kDAAA,CACA,2BAAA,CACA,qBAAA,CACA,0BAAA,CAIJ,cACI,eAAA,CACA,wBC5BU,CD6BV,YAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CACA,iBAAA,CE/BI,oCFwBR,cAUQ,YAAA,CACA,6BAAA,CACA,kBAAA,CAAA,CAGJ,4FACI,YAAA,CACA,QAAA,CACA,kBAAA,CACA,sBAAA,CAEA,oGACI,cAAA,CAGJ,4HACI,UCrDF,CDyDN,8BACI,UC1DE,CD+DV,EACI,aAAA,CACA,oBAAA,CACA,eAAA,CAGJ,MACI,WAAA,CACA,YAAA,CACA,qBAAA,CACA,SAAA,CACA,gBAAA,CAEJ,gBACI,YAAA,CACA,6BAAA,CACA,QAAA,CACA,YAAA,CAGJ,cACI,YAAA,CACA,YAAA,CACA,6BAAA,CACA,OAAA,CACA,6CAAA,CACA,mBAAA,CACA,qBC1FM,CD2FN,2BAAA,CAEA,kBACI,eAAA,CACA,YAAA,CACA,mBAAA,CAGJ,sBACI,YAAA,CACA,eAAA,CAEJ,+BACI,YAAA,CACA,eAAA,CAEJ,+BACI,eAAA,CAEJ,+BACI,eAAA,CAEJ,+BACI,eAAA,CAEJ,+BACI,eAAA,CACH,+BACG,eAAA,CAIR,iCACI,aAAA,CACA,qBC7HM,CDkIV,QACI,iBAAA,CACA,oBAAA,CACA,UAAA,CACA,WAAA,CAIF,cACE,SAAA,CACA,OAAA,CACA,QAAA,CAIF,QACE,iBAAA,CACA,cAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,wBCpJO,CDqJP,sBAAA,CACA,cAAA,CAEA,eACI,iBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,UAAA,CACA,wBCpKQ,CDqKR,sBAAA,CACA,cAAA,CAKN,sBACE,wBC1KO,CD6KT,oBACE,0BAAA,CAGF,6BACE,kCAAA,CACA,8BAAA,CACA,0BAAA,CACA,WAAA,CACA,wBCvLe,CD2LjB,cACE,kBAAA,CAGF,qBACE,iBAAA",sourcesContent:["\n@import './variables.scss'; \n@import './mixins.scss';\n\n* {\n    margin: 0; \n    padding: 0; \n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n}\n\n#root {\n    color: $text-col;\n    min-height: 100vh;\n    height: 100%; \n    display: flex; \n    flex-direction: column;\n    justify-content: space-between;\n\n    background: url('../../images/snow-bg.jpg');\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n\n}\n\nheader, footer {\n    min-height: 10vh;\n    background-color: $primary-col;\n    display: grid; \n    gap: 25px; \n    align-items: center;\n    justify-content: center;\n    padding: 10px 25px; \n\n    @include resize('tablet') {\n        display: flex; \n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .searchContainer, .linkContainer {\n        display: flex; \n        gap: 10px; \n        align-items: center;\n        justify-content: center;\n\n        i {\n            cursor: pointer;\n        }\n\n        i:hover {\n            color: $card-bg; \n        }\n    }\n\n    a:hover {\n        color: $card-bg; \n    }\n}\n\n\na {\n    color: inherit;\n    text-decoration: none;\n    font-size: 1.5em;\n}\n\n#main {\n    flex-grow: 1; \n    display: flex;\n    flex-direction: column;\n    width: 80%; \n    margin: 25px auto; \n}\n.main-container {\n    display: grid;\n    grid-template-columns: 2fr 2fr;\n    gap: 20px;\n    flex-grow: 0.7; \n\n}\n#main-weather {\n    padding: 25px; \n    display: grid; \n    grid-template-columns: 4fr 1fr;\n    gap: 5px; \n    grid-template-rows: 1fr repeat(4, max-content);\n    align-items: stretch;\n    background-color: $card-bg; \n    box-shadow: 0 4px 5px 0 rgba(0,0,0,1);\n\n    img {\n        grid-column: 1/3;\n        grid-row: 1/2;\n        justify-self: center;\n    }\n\n    .switch {\n        grid-row: 2/3; \n        grid-column: 2/3; \n    }\n    &:first-of-type(p) {\n        grid-row: 2/3; \n        grid-column: 1/2; \n    }\n    & p:nth-of-type(2) {\n        grid-column: 1/2; \n    }\n    & p:nth-of-type(3) {\n        grid-column: 1/2; \n    }\n    & p:nth-of-type(4) {\n        grid-column: 1/2; \n    }\n    & p:nth-of-type(5) {\n        grid-column: 1/2; \n    }& p:nth-of-type(6) {\n        grid-column: 1/2; \n    }\n}\n\n.main-container div:nth-child(2) {\n    flex: 1 0 auto;\n    background-color: $card-bg;\n}\n\n\n/* The switch - the box around the slider */\n.switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }\n  \n  /* Hide default HTML checkbox */\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n  \n  /* The slider */\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: $text-col;\n    -webkit-transition: .4s;\n    transition: .4s;\n\n    &:before {\n        position: absolute;\n        content: \"C\";\n        display: flex; \n        align-items: center;\n        justify-content: center;\n        height: 26px;\n        width: 26px;\n        left: 4px;\n        bottom: 4px;\n        background-color: $secondary-col;\n        -webkit-transition: .4s;\n        transition: .4s;\n      }\n  }\n  \n  \n  input:checked + .slider {\n    background-color: $text-col;;\n  }\n  \n  input:focus + .slider {\n    box-shadow: 0 0 1px $text-col;;\n  }\n  \n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n    content: \"F\";\n    background-color: $toggle-secondary;\n  }\n  \n  /* Rounded sliders */\n  .slider.round {\n    border-radius: 34px;\n  }\n  \n  .slider.round:before {\n    border-radius: 50%;\n  }","$card-bg: white; \n$primary-col: #7FC0DC; \n$secondary-col: #F78763; \n$toggle-secondary: #63CBF7;\n$text-col: #2B2B2B;","@mixin resize($bp) {\n\n    @if $bp == 'tablet' {\n        @media screen and (min-width: 48em) {\n            @content;\n        }\n    }\n    @if $bp == 'laptop' {\n        @media screen and (min-width: 64em) {\n            @content;\n        }\n    }\n    @if $bp == 'desktop' {\n        @media screen and (min-width: 90em) {\n            @content;\n        }\n    }\n}"],sourceRoot:""}]);const l=d},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var A=e[c],s=r.base?A[0]+r.base:A[0],d=i[s]||0,p="".concat(s," ").concat(d);i[s]=d+1;var l=t(p),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==l)n[l].references++,n[l].updater(u);else{var C=o(u,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:C,references:1})}a.push(p)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var A=r(e,o),s=0;s<i.length;s++){var d=t(i[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=A}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},402:(e,n,t)=>{e.exports=t.p+"dba4d67576eebedf4497.jpg"}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),c=t(565),A=t.n(c),s=t(216),d=t.n(s),p=t(589),l=t.n(p),u=t(151),C={};function m(e){const n=e.list,t=function(e){console.log(e);const n=document.createElement("div"),t=document.createElement("img"),r=document.createElement("p"),o=document.createElement("p"),i=document.createElement("p"),a=document.createElement("p"),c=document.createElement("p");let A=function(){const e=document.createElement("label"),n=document.createElement("input"),t=document.createElement("span");return e.className="switch",n.type="checkbox",t.className="slider round",e.append(n),e.append(t),e}();var s;return A.id="toggle",r.innerText=e.dt_txt,o.innerText=Math.round(10*(e.main.temp-273))/10+" C",i.innerText=e.weather[0].main,a.innerText=e.main.pressure+" hPa",c.innerText=e.wind.speed+" m/s",t.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,s=i.innerText,-1!=["snow","rain","sun","clouds","lightning","mist"].indexOf(s.toLowerCase())?(document.querySelector("#root").style.backgroundImage=`url(../images/${s.toLowerCase()}-bg.jpg)`,console.log("updated")):(console.log("MISSING"),console.log(s)),o.classList="temp",n.append(t),n.append(A),n.append(r),n.append(o),n.append(i),n.append(a),n.append(c),n.id="main-weather",n}(n[0]),r=function(e,n,t){const r=document.createElement("div");return e.forEach(((e,n)=>{if(n>=0&&n<=2){console.log(e);const n=document.createElement("div"),t=document.createElement("img"),o=document.createElement("p"),i=document.createElement("p");o.innerText=e.dt_txt,i.innerText=Math.round(10*(e.main.temp-273))/10+" C"||0,t.src=`https://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,i.classList="temp",n.append(t),n.append(o),n.append(i),n.className="future-card",r.append(n)}})),r}(n);console.log(r),function(e,n){const t=document.createElement("div");t.append(e),t.append(n),t.className="main-container",document.querySelector("#main").append(t),document.querySelector("#toggle").querySelector("input").addEventListener("click",(function(){!function(e){const n=e.checked;document.querySelectorAll(".temp").forEach((e=>{let t=e.innerText.split(" ")[0];e.innerText=n?Math.round(10*(1.8*t+32))/10+" F":Math.round(5/9*(t-32)*10)/10+" C"}))}(this)}))}(t,r)}C.styleTagTransform=l(),C.setAttributes=A(),C.insert=a().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=d(),n()(u.Z,C),u.Z&&u.Z.locals&&u.Z.locals,function(){const e=document.createElement("header"),n=document.createElement("h1"),t=document.createElement("div"),r=document.createElement("input"),o=document.createElement("i");n.innerText="Weather App",r.type="text",r.placeholder="City...",o.className="fa-solid fa-magnifying-glass",t.append(r),t.append(o),t.className="searchContainer",e.append(n),e.append(t),document.querySelector("#header").append(e)}(),async function(e){const n=await fetch("https://api.openweathermap.org/data/2.5/forecast?q=Consett, UK&appid=cb561535d4382bd95e0f2ab965974e4e");m(await n.json())}(),function(){const e=document.createElement("footer"),n=document.createElement("a"),t=document.createElement("div"),r=document.createElement("a"),o=document.createElement("a");n.innerText="The Odin Project",n.href="https://www.theodinproject.com/",n.target="_blank",r.innerHTML='<i class="fa-brands fa-github"></i>',r.href="https://github.com/cdevelopment010/",r.target="_blank",o.innerHTML='<i class="fa-brands fa-youtube"></i>',o.href="https://www.youtube.com/channel/UCtHK20C4Dw4fcs7kZDl4QPQ",o.target="_blank",t.append(r),t.append(o),t.className="linkContainer",e.append(n),e.append(t),document.querySelector("#footer").append(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,